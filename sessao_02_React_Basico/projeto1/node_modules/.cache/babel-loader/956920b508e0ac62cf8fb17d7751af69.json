{"ast":null,"code":"var _jsxFileName = \"E:\\\\CURSOS\\\\REACT_JS_E_NEXT_JS_COMPLETO\\\\sessao_02\\\\projeto1\\\\src\\\\App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      posts: []\n    };\n\n    this.loadPosts = async () => {\n      //utilizamos o fetch para fazer uma requisição e será esperado um response \n      //neste caso faremos uma requisição para os posts e outra para as fotos\n      const postResponse = fetch('https://jsonplaceholder.typicode.com/posts');\n      const photosResponse = fetch('https://jsonplaceholder.typicode.com/photos'); //criamos dois arrays que irão receber os conteúdos na ordem dos responses\n      //que são obtidos através da função Promise que pega o retorno do response\n      //e passa para cada variavel separada\n\n      const [posts, photos] = await Promise.all([postResponse, photosResponse]); //aqui criamos um objeto que receberá a conversão do array para\n      //o formato json\n\n      const postJson = await posts.json();\n      const photosJson = await photos.json(); //fazendo a união entre dois arrays utilizando o map para escolher\n\n      /*quais atributos do primeiro array serão utilizados, sendo que\n      iremos retornar o post e utilizando a função cover nós pegamos do \n      segundo array o atributo que queremos */\n\n      const postsAndPhotos = postJson.map((post, index) => {\n        return { ...post,\n          cover: photosJson[index].url\n        };\n      }); //susbstituimos o postJson que tinha somente os posts pelo postsAndPhotos\n\n      this.setState({\n        posts: postsAndPhotos\n      });\n    };\n  }\n\n  //esse é um life cicle metods\n  componentDidMount() {\n    this.loadPosts();\n  }\n\n  //é um life cicle que recebe o estado anterior ou props states\n  componentDidUpdate() {} //para apagar o lixo e não dar erro no navegador\n\n\n  componentWillUnmount() {}\n\n  render() {\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App, posts\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.cover,\n            alt: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this)]\n          }, post.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/CURSOS/REACT_JS_E_NEXT_JS_COMPLETO/sessao_02/projeto1/src/App.js"],"names":["Component","App","state","posts","loadPosts","postResponse","fetch","photosResponse","photos","Promise","all","postJson","json","photosJson","postsAndPhotos","map","post","index","cover","url","setState","componentDidMount","componentDidUpdate","componentWillUnmount","render","title","body","id"],"mappings":";AACA,OAAO,WAAP;AACA,SAAQA,SAAR,QAAwB,OAAxB;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEvBE,KAFuB,GAEhB;AACLC,MAAAA,KAAK,EAAC;AADD,KAFgB;;AAAA,SAavBC,SAbuB,GAaX,YAAW;AACrB;AACA;AACA,YAAMC,YAAY,GAAGC,KAAK,CAAC,4CAAD,CAA1B;AACA,YAAMC,cAAc,GAAGD,KAAK,CAAC,6CAAD,CAA5B,CAJqB,CAMrB;AACA;AACA;;AACA,YAAM,CAACH,KAAD,EAAQK,MAAR,IAAkB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACL,YAAD,EAAeE,cAAf,CAAZ,CAA9B,CATqB,CAWrB;AACA;;AACA,YAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,EAAvB;AACA,YAAMC,UAAU,GAAG,MAAML,MAAM,CAACI,IAAP,EAAzB,CAdqB,CAgBrB;;AACA;AACN;AACA;;AACM,YAAME,cAAc,GAAGH,QAAQ,CAACI,GAAT,CAAa,CAACC,IAAD,EAAMC,KAAN,KAAc;AAChD,eAAO,EAAE,GAAGD,IAAL;AAAWE,UAAAA,KAAK,EAAEL,UAAU,CAACI,KAAD,CAAV,CAAkBE;AAApC,SAAP;AACD,OAFsB,CAAvB,CApBqB,CAwBrB;;AACA,WAAKC,QAAL,CAAc;AAACjB,QAAAA,KAAK,EAAEW;AAAR,OAAd;AACD,KAvCsB;AAAA;;AAQvB;AACAO,EAAAA,iBAAiB,GAAE;AACjB,SAAKjB,SAAL;AACD;;AA8BD;AACAkB,EAAAA,kBAAkB,GAAE,CAEnB,CA5CsB,CA8CvB;;;AACAC,EAAAA,oBAAoB,GAAE,CAErB;;AAEHC,EAAAA,MAAM,GAAE;AACN,UAAM;AAACrB,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACGC,KAAK,CAACY,GAAN,CAAUC,IAAI,iBACb;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEA,IAAI,CAACE,KAAf;AAAsB,YAAA,GAAG,EAAEF,IAAI,CAACS;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAmB,YAAA,SAAS,EAAC,cAA7B;AAAA,oCACE;AAAA,wBAAKT,IAAI,CAACS;AAAV;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAIT,IAAI,CAACU;AAAT;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA,aAAUV,IAAI,CAACW,EAAf;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAtEwB;;AAyE3B,eAAe1B,GAAf","sourcesContent":["\nimport './App.css';\nimport {Component} from 'react'\n\nclass App extends Component{\n \n    state ={\n      posts:[\n\n      ]\n    };\n\n    //esse é um life cicle metods\n    componentDidMount(){\n      this.loadPosts();\n    }\n\n    loadPosts = async () =>{\n      //utilizamos o fetch para fazer uma requisição e será esperado um response \n      //neste caso faremos uma requisição para os posts e outra para as fotos\n      const postResponse = fetch('https://jsonplaceholder.typicode.com/posts');\n      const photosResponse = fetch('https://jsonplaceholder.typicode.com/photos');\n\n      //criamos dois arrays que irão receber os conteúdos na ordem dos responses\n      //que são obtidos através da função Promise que pega o retorno do response\n      //e passa para cada variavel separada\n      const [posts, photos] = await Promise.all([postResponse, photosResponse]);\n\n      //aqui criamos um objeto que receberá a conversão do array para\n      //o formato json\n      const postJson = await posts.json();\n      const photosJson = await photos.json();\n\n      //fazendo a união entre dois arrays utilizando o map para escolher\n      /*quais atributos do primeiro array serão utilizados, sendo que\n      iremos retornar o post e utilizando a função cover nós pegamos do \n      segundo array o atributo que queremos */\n      const postsAndPhotos = postJson.map((post,index)=>{\n        return { ...post, cover: photosJson[index].url }\n      })\n\n      //susbstituimos o postJson que tinha somente os posts pelo postsAndPhotos\n      this.setState({posts: postsAndPhotos});\n    }\n\n    //é um life cicle que recebe o estado anterior ou props states\n    componentDidUpdate(){\n    \n    }\n\n    //para apagar o lixo e não dar erro no navegador\n    componentWillUnmount(){\n  \n    }\n\n  render(){\n    const {posts} = this.state;\n\n    return (\n      <section className='container'>\n        <div className=\"App, posts\">     \n          {posts.map(post=> (\n            <div className='post'>\n              <img src={post.cover} alt={post.title} />\n              <div key={post.id} className='post-content'>\n                <h1>{post.title}</h1>\n                <p>{post.body}</p>\n              </div>\n            </div>                    \n          ))}\n    </div>\n      </section>\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}